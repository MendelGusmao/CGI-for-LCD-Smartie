CGI FOR LCD SMARTIE

    This document describes the basic concept and usage of CGI for LCD Smartie.

    CGI for LCD Smartie is designed to be a fast gateway between LCD Smartie and language 
    interpreters such as PHP, Ruby and Python, making it easier to gather information to 
    show on the display without the need to create new plugins.

    The software is made from two parts: a server (cgi4lcd.exe) and a plugin (cgi.dll).
    The plugin is responsible for sending the command to the server, receiving a response and
    relaying it to LCD Smartie.
    The server receives the command, executes the specified interpreter and stores the command 
    and its response in a queue. At a specified time it will run the command, caching its result. 
    When the plugin asks the server for the response of a command, it will deliver the cached 
    result instead of executing the interpreter again.

WHY PHP FOR LCD SMARTIE IS NOW CGI FOR LCD SMARTIE?

    In the previous version, the plugin was responsible for executing the interpreter. This way of 
    operation had many problems because it freezes LCD Smartie until the interpreter has finished 
    its execution. The time between interpreter initialization and output display depends on many 
    factors but mainly by the complexity of the script that was run.

WHEN IT WILL BE USEFUL?

    - If you want to gather data from databases or internet applications
    - You want to do that in a short timespan, using your preferred programming language
    - You don't have patience to build complex plugins using C++, Delphi or VB
    - You are really not interested in worrying about pointers, variables and other things that strongly
      typed languages has to bother you

WHEN IT WILL NOT BE USEFUL?

    - Basically, for everything that demands fast or realtime data displaying of data, like graph bars

INSTALLING

    Download plugins and scripts folder and copy them to your LCD Smartie folder

CONFIGURING

    All configuration is done by cgi4lcd.ini (avaliable in scripts folder).

    The first section is [cgi4lcd] and it has the following attributes:
    
      - interval (numeric, milliseconds)
	Value to tell the server of how often a command it will be executed

      - timeout (numeric, milliseconds)
	Value to tell the server of how long after the command is not requested by the
	plugin to remove it from the queue

      - port (numeric, 1-65535)
	A numeric value representing the UDP port that will be used for the communication between
	server and plugin

      - default (string)
	The default file extension to be considered by the plugin if it's not specified in filename

      - show_window (boolean, 0/1)
	If the value is 1, the server window will appear when it's executed, showing the queue
	processing and incoming requests

    --> continue from here

    The first step of configuration is to copy the directory called "scripts" to LCD Smartie
    directory. Inside are three files, main.php, test.php and coretemp.php. The first is the
    most important, because it contains the code necessary to parse the incoming data from $dll
    and perform what it was asked to do. The second is a testfile with some silly functions to
    test if everything's OK and the third is a proof-of-concept of using core temp to register
    data about the machine to a log, read the log with PHP and show it in the display.

    The second step is to configure, setting the PHP interpreter (usually php.exe),
    min refresh rate and timeout in scripts\php.ini:

        [smartie]
        interpreter="c:\php\bin\php.exe"
        timeout=5
        refresh=15000

    Of course, replace the path above by the path of the PHP interpreter on your machine.

    To give some boost in PHP process startup, I decided to include a php.ini in scripts
    directory. This is a stripped version that doesn't make PHP load too many extensions.
    However, if you need to load a specific extension, just uncomment the line, as you would
    do normally.

USING

    There are 2 functions in the plugin.

    The first is the code executor and it has 2 parameters:

        - filename (mandatory)
        - function (optional) and arguments (separated by semicolons), also optional

        > $dll(php,1,filename[.php],[function[#arg1;arg2;...]])

    * The extension ".php" in filename is optional.

    The second shows the PHP version (output of php.exe -v) and has no parameters.

        > $dll(php,2,,)

    There are three possible usages for code executing:

        1 - Executing a PHP file

            > $dll(php,1,file[.php],)

        2 - Executing a function of a PHP file without arguments

            > $dll(php,1,file[.php],function)

        3 - Executing a function of a PHP file with arguments

            > $dll(php,1,file[.php],function#arg1;arg2;argX)

WRITING SCRIPTS

    Create a .php file in scripts directory with the following lines:

    <?php

	// your code here

	main();

    ?>

    Since version 0.2, there is no need to include scripts\main.php in your file and
    doing that will cause an error.

ISSUES

    Due to a bug (it's not a bug, it's a feature!) of LCD Smartie, the program awaits
    for the end of the execution of the plugin code before showing any data on the display.
    If a programming error, race condition, infinite loop or something else causes freezing
    of the PHP interpreter, the plugin will freeze, waiting for PHP process to terminate and
    then, LCD Smartie will be freezing too. My idea is to implement a watchdog timer, then, in
    case the PHP process take more time than the chosen value of timeout, it will be instantly
    killed and the plugin will return an empty string or an error message.

    I'm not sure if it's a problem of PHP interpreter, of the plugin or LCD Smartie,
    but when using the plugin, the LCD Smartie goes slow. For a test with a script
    that contains 4 functions (monitoring of some bot applications), it was really slow and
    sometimes the screen appeared for just 1 second before the next screen. I tried to
    fix it with the stripped php.ini.

TODO

    - Rewrite almost every function or method using std::string to use char pointers
    - Make the plugin run cgi4lcd.exe if it's not in execution
    - <your suggestion here>

FINALLY

    if ($questions || $suggestions)
        send_email("mendelsongusmao+github@gmail.com");

    (Text corrections are welcome too, since english is not my native language).